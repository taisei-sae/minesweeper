name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-linux:
    name: Build on Ubuntu
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libglfw3-dev libglew-dev libimgui-dev libgtest-dev

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake ..

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: minesweeper-linux
        path: build/Minesweeper
        retention-days: 7

  build-windows:
    name: Build on Windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup vcpkg and install dependencies
      uses: lukka/run-vcpkg@v11
      with:
        doNotCache: false

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
      env:
        VCPKG_DISABLE_METRICS: 1

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Run tests
      run: |
        cd build
        ctest -C Release --output-on-failure

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: minesweeper-windows
        path: build/Release/Minesweeper.exe
        retention-days: 7


  # Summary job to check if all builds succeeded
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: always()

    steps:
    - name: Check build results
      run: |
        echo "Linux build: ${{ needs.build-linux.result }}"
        echo "Windows build: ${{ needs.build-windows.result }}"

        if [ "${{ needs.build-linux.result }}" != "success" ] || \
           [ "${{ needs.build-windows.result }}" != "success" ]; then
          echo "❌ One or more builds failed"
          exit 1
        else
          echo "✅ All builds succeeded!"
        fi
